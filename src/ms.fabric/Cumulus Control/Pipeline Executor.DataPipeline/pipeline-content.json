{
  "properties": {
    "activities": [
      {
        "type": "AzureFunctionActivity",
        "typeProperties": {
          "method": "POST",
          "functionName": "PipelineExecute",
          "headers": {},
          "body": {
            "value": "@concat('\n{\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
            "type": "Expression"
          }
        },
        "externalReferences": {
          "connection": "a6f42d71-fe10-4195-8017-67b8f8177334"
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": true,
          "secureOutput": false
        },
        "name": "Execute Worker Pipeline",
        "description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
        "dependsOn": [
          {
            "activity": "Log Pipeline Running",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Get Pipeline Params",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "SqlServerStoredProcedure",
        "typeProperties": {
          "storedProcedureName": "[control].[SetLogPipelineRunning]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "connectionSettings": {
          "name": "Metadata Database",
          "properties": {
            "type": "FabricSqlDatabase",
            "typeProperties": {
              "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
              "workspaceId": "00000000-0000-0000-0000-000000000000"
            },
            "externalReferences": {
              "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Log Pipeline Running",
        "description": "Sets the current pipeline with a status of running within the current execution database table.",
        "dependsOn": [
          {
            "activity": "Is Target Worker Validate",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "SqlServerStoredProcedure",
        "typeProperties": {
          "storedProcedureName": "[control].[SetLogActivityFailed]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "CallingActivity": {
              "value": "ExecuteWorkerPipeline",
              "type": "String"
            }
          }
        },
        "connectionSettings": {
          "name": "Metadata Database",
          "properties": {
            "type": "FabricSqlDatabase",
            "typeProperties": {
              "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
              "workspaceId": "00000000-0000-0000-0000-000000000000"
            },
            "externalReferences": {
              "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Log Execute Function Activity Failure",
        "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
        "dependsOn": [
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Failed"
            ]
          }
        ]
      },
      {
        "type": "SqlServerStoredProcedure",
        "typeProperties": {
          "storedProcedureName": "[control].[SetLogPipelineRunId]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "RunId": {
              "value": {
                "value": "@variables('WorkerRunId')",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "connectionSettings": {
          "name": "Metadata Database",
          "properties": {
            "type": "FabricSqlDatabase",
            "typeProperties": {
              "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
              "workspaceId": "00000000-0000-0000-0000-000000000000"
            },
            "externalReferences": {
              "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Update Run Id",
        "description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
        "dependsOn": [
          {
            "activity": "Set Run Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "Until",
        "typeProperties": {
          "expression": {
            "value": "@variables('WorkerPipelineState')",
            "type": "Expression"
          },
          "timeout": "0.04:00:00",
          "activities": [
            {
              "type": "AzureFunctionActivity",
              "typeProperties": {
                "method": "POST",
                "functionName": "PipelineGetStatus",
                "headers": {},
                "body": {
                  "value": "@concat('\n{\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                  "type": "Expression"
                }
              },
              "externalReferences": {
                "connection": "a6f42d71-fe10-4195-8017-67b8f8177334"
              },
              "policy": {
                "timeout": "0.03:59:59",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": true,
                "secureOutput": false
              },
              "name": "Get Worker Pipeline Status",
              "description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
              "dependsOn": []
            },
            {
              "type": "IfCondition",
              "typeProperties": {
                "expression": {
                  "value": "@variables('WorkerPipelineState')",
                  "type": "Expression"
                },
                "ifTrueActivities": [],
                "ifFalseActivities": [
                  {
                    "type": "Wait",
                    "typeProperties": {
                      "waitTimeInSeconds": {
                        "value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
                        "type": "Expression"
                      }
                    },
                    "name": "Wait for Pipeline",
                    "description": "The processing pipeline is still running so Wait before checking its status again.",
                    "dependsOn": []
                  }
                ]
              },
              "name": "Wait If Running",
              "description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
              "dependsOn": [
                {
                  "activity": "Set Worker State",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ]
            },
            {
              "type": "SqlServerStoredProcedure",
              "typeProperties": {
                "storedProcedureName": "[control].[SetLogPipelineLastStatusCheck]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "connectionSettings": {
                "name": "Metadata Database",
                "properties": {
                  "type": "FabricSqlDatabase",
                  "typeProperties": {
                    "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                    "workspaceId": "00000000-0000-0000-0000-000000000000"
                  },
                  "externalReferences": {
                    "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                  },
                  "annotations": []
                }
              },
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Set Last Check DateTime",
              "description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ]
            },
            {
              "type": "SqlServerStoredProcedure",
              "typeProperties": {
                "storedProcedureName": "[control].[SetLogActivityFailed]",
                "storedProcedureParameters": {
                  "CallingActivity": {
                    "value": "GetWorkerPipelineStatus",
                    "type": "String"
                  },
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "connectionSettings": {
                "name": "Metadata Database",
                "properties": {
                  "type": "FabricSqlDatabase",
                  "typeProperties": {
                    "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                    "workspaceId": "00000000-0000-0000-0000-000000000000"
                  },
                  "externalReferences": {
                    "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                  },
                  "annotations": []
                }
              },
              "policy": {
                "timeout": "0.00:10:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Log Check Function Activity Failure",
              "description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Failed"
                  ]
                }
              ]
            },
            {
              "type": "SetVariable",
              "typeProperties": {
                "variableName": "WorkerPipelineState",
                "value": {
                  "value": "@equals('Complete',activity('Get Worker Pipeline Status').output.SimpleStatus)",
                  "type": "Expression"
                }
              },
              "policy": {
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Set Worker State",
              "description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
              "dependsOn": [
                {
                  "activity": "Get Worker Pipeline Status",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ]
            }
          ]
        },
        "name": "Wait Until Pipeline Completes",
        "description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
        "dependsOn": [
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Set Run Id",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Get Wait Duration",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "Switch",
        "typeProperties": {
          "on": {
            "value": "@activity('Get Worker Pipeline Status').output.ActualStatus",
            "type": "Expression"
          },
          "cases": [
            {
              "value": "Succeeded",
              "activities": [
                {
                  "type": "SqlServerStoredProcedure",
                  "typeProperties": {
                    "storedProcedureName": "[control].[SetLogPipelineSuccess]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "connectionSettings": {
                    "name": "Metadata Database",
                    "properties": {
                      "type": "FabricSqlDatabase",
                      "typeProperties": {
                        "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                        "workspaceId": "00000000-0000-0000-0000-000000000000"
                      },
                      "externalReferences": {
                        "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                      },
                      "annotations": []
                    }
                  },
                  "policy": {
                    "timeout": "0.00:01:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30,
                    "secureInput": false,
                    "secureOutput": false
                  },
                  "name": "Pipeline Status Succeeded",
                  "description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
                  "dependsOn": []
                }
              ]
            },
            {
              "value": "Failed",
              "activities": [
                {
                  "type": "SqlServerStoredProcedure",
                  "typeProperties": {
                    "storedProcedureName": "[control].[SetLogPipelineFailed]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "RunId": {
                        "value": {
                          "value": "@variables('WorkerRunId')",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "connectionSettings": {
                    "name": "Metadata Database",
                    "properties": {
                      "type": "FabricSqlDatabase",
                      "typeProperties": {
                        "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                        "workspaceId": "00000000-0000-0000-0000-000000000000"
                      },
                      "externalReferences": {
                        "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                      },
                      "annotations": []
                    }
                  },
                  "policy": {
                    "timeout": "0.00:01:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30,
                    "secureInput": false,
                    "secureOutput": false
                  },
                  "name": "Pipeline Status Failed",
                  "description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
                  "dependsOn": []
                },
                {
                  "type": "AzureFunctionActivity",
                  "typeProperties": {
                    "method": "POST",
                    "functionName": "PipelineGetErrorDetails",
                    "headers": {},
                    "body": {
                      "value": "@concat('\n{\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                      "type": "Expression"
                    }
                  },
                  "externalReferences": {
                    "connection": "a6f42d71-fe10-4195-8017-67b8f8177334"
                  },
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureInput": true,
                    "secureOutput": false
                  },
                  "name": "Get Worker Pipeline Error Details",
                  "description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
                  "dependsOn": []
                },
                {
                  "type": "SqlServerStoredProcedure",
                  "typeProperties": {
                    "storedProcedureName": "[control].[SetErrorLogDetails]",
                    "storedProcedureParameters": {
                      "JsonErrorDetails": {
                        "value": {
                          "value": "@string(activity('Get Worker Pipeline Error Details').output)",
                          "type": "Expression"
                        },
                        "type": "String"
                      },
                      "LocalExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      }
                    }
                  },
                  "connectionSettings": {
                    "name": "Metadata Database",
                    "properties": {
                      "type": "FabricSqlDatabase",
                      "typeProperties": {
                        "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                        "workspaceId": "00000000-0000-0000-0000-000000000000"
                      },
                      "externalReferences": {
                        "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                      },
                      "annotations": []
                    }
                  },
                  "policy": {
                    "timeout": "0.00:01:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30,
                    "secureInput": false,
                    "secureOutput": false
                  },
                  "name": "Log Error Details",
                  "description": "Parses pipeline error details and persists them to the metadata database error log table.",
                  "dependsOn": [
                    {
                      "activity": "Get Worker Pipeline Error Details",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Cancelled",
              "activities": [
                {
                  "type": "SqlServerStoredProcedure",
                  "typeProperties": {
                    "storedProcedureName": "[control].[SetLogPipelineCancelled]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "connectionSettings": {
                    "name": "Metadata Database",
                    "properties": {
                      "type": "FabricSqlDatabase",
                      "typeProperties": {
                        "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                        "workspaceId": "00000000-0000-0000-0000-000000000000"
                      },
                      "externalReferences": {
                        "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                      },
                      "annotations": []
                    }
                  },
                  "policy": {
                    "timeout": "0.00:01:00",
                    "retry": 2,
                    "retryIntervalInSeconds": 30,
                    "secureInput": false,
                    "secureOutput": false
                  },
                  "name": "Pipeline Status Cancelled",
                  "description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
                  "dependsOn": []
                }
              ]
            }
          ],
          "defaultActivities": [
            {
              "type": "SqlServerStoredProcedure",
              "typeProperties": {
                "storedProcedureName": "[control].[SetLogPipelineUnknown]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "connectionSettings": {
                "name": "Metadata Database",
                "properties": {
                  "type": "FabricSqlDatabase",
                  "typeProperties": {
                    "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                    "workspaceId": "00000000-0000-0000-0000-000000000000"
                  },
                  "externalReferences": {
                    "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                  },
                  "annotations": []
                }
              },
              "policy": {
                "timeout": "0.00:01:00",
                "retry": 2,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Pipeline Status Unknown",
              "description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
              "dependsOn": []
            }
          ]
        },
        "name": "Set Pipeline Result",
        "description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
        "dependsOn": [
          {
            "activity": "Wait Until Pipeline Completes",
            "dependencyConditions": [
              "Completed"
            ]
          }
        ]
      },
      {
        "type": "SetVariable",
        "typeProperties": {
          "variableName": "WorkerRunId",
          "value": {
            "value": "@activity('Execute Worker Pipeline').output.RunId",
            "type": "Expression"
          }
        },
        "policy": {
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Set Run Id",
        "description": "Set local variable from activity output once for value reuse in downstream activities.",
        "dependsOn": [
          {
            "activity": "Execute Worker Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "AzureFunctionActivity",
        "typeProperties": {
          "method": "POST",
          "functionName": "PipelineValidate",
          "headers": {},
          "body": {
            "value": "@concat('\n{\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\"\n}')",
            "type": "Expression"
          }
        },
        "externalReferences": {
          "connection": "a6f42d71-fe10-4195-8017-67b8f8177334"
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": true,
          "secureOutput": false
        },
        "name": "Validate Pipeline",
        "description": "Query the target data factory and establish if the provided worker pipeline name is valid.",
        "dependsOn": [
          {
            "activity": "Log Pipeline Validating",
            "dependencyConditions": [
              "Succeeded"
            ]
          },
          {
            "activity": "Capture Worker Core Details as an Array",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "IfCondition",
        "typeProperties": {
          "expression": {
            "value": "@bool(activity('Validate Pipeline').output.PipelineExists)",
            "type": "Expression"
          },
          "ifTrueActivities": [],
          "ifFalseActivities": [
            {
              "type": "SqlServerStoredProcedure",
              "typeProperties": {
                "storedProcedureName": "[control].[SetLogActivityFailed]",
                "storedProcedureParameters": {
                  "CallingActivity": {
                    "value": "InvalidPipelineName",
                    "type": "String"
                  },
                  "ExecutionId": {
                    "value": {
                      "value": "@pipeline().parameters.ExecutionId",
                      "type": "Expression"
                    },
                    "type": "Guid"
                  },
                  "PipelineId": {
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  },
                  "StageId": {
                    "value": {
                      "value": "@pipeline().parameters.StageId",
                      "type": "Expression"
                    },
                    "type": "Int32"
                  }
                }
              },
              "connectionSettings": {
                "name": "Metadata Database",
                "properties": {
                  "type": "FabricSqlDatabase",
                  "typeProperties": {
                    "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                    "workspaceId": "00000000-0000-0000-0000-000000000000"
                  },
                  "externalReferences": {
                    "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                  },
                  "annotations": []
                }
              },
              "policy": {
                "timeout": "7.00:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Update Execution With Invalid Worker",
              "description": "Update the current execution table with an informed status for the worker pipeline that couldn't be executed.",
              "dependsOn": []
            },
            {
              "type": "Fail",
              "typeProperties": {
                "message": {
                  "value": "@concat('Worker pipeline [',variables('WorkerCoreDetails')[0].pipelineName,'] is not valid in target Orchestrator [',variables('WorkerCoreDetails')[0].orchestratorName,']')",
                  "type": "Expression"
                },
                "errorCode": "16"
              },
              "name": "Throw Exception - Invalid Worker",
              "description": "Throw an exception with details about the invalid worker pipeline name.",
              "dependsOn": []
            }
          ]
        },
        "name": "Is Target Worker Validate",
        "description": "True = the worker pipeline name is valid.\nFalse = the worker pipeline name is invalid. Raise an exception.",
        "dependsOn": [
          {
            "activity": "Validate Pipeline",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "SqlServerStoredProcedure",
        "typeProperties": {
          "storedProcedureName": "[control].[SetLogActivityFailed]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "CallingActivity": {
              "value": "ValidatePipeline",
              "type": "String"
            }
          }
        },
        "connectionSettings": {
          "name": "Metadata Database",
          "properties": {
            "type": "FabricSqlDatabase",
            "typeProperties": {
              "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
              "workspaceId": "00000000-0000-0000-0000-000000000000"
            },
            "externalReferences": {
              "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Log Validate Function Activity Failure",
        "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
        "dependsOn": [
          {
            "activity": "Validate Pipeline",
            "dependencyConditions": [
              "Failed"
            ]
          }
        ]
      },
      {
        "type": "SqlServerStoredProcedure",
        "typeProperties": {
          "storedProcedureName": "[control].[SetLogPipelineValidating]",
          "storedProcedureParameters": {
            "ExecutionId": {
              "value": {
                "value": "@pipeline().parameters.ExecutionId",
                "type": "Expression"
              },
              "type": "Guid"
            },
            "PipelineId": {
              "value": {
                "value": "@pipeline().parameters.pipelineId",
                "type": "Expression"
              },
              "type": "Int32"
            },
            "StageId": {
              "value": {
                "value": "@pipeline().parameters.StageId",
                "type": "Expression"
              },
              "type": "Int32"
            }
          }
        },
        "connectionSettings": {
          "name": "Metadata Database",
          "properties": {
            "type": "FabricSqlDatabase",
            "typeProperties": {
              "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
              "workspaceId": "00000000-0000-0000-0000-000000000000"
            },
            "externalReferences": {
              "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Log Pipeline Validating",
        "description": "Sets the current pipeline with a status of validating within the current execution database table.",
        "dependsOn": []
      },
      {
        "type": "SetVariable",
        "typeProperties": {
          "variableName": "WorkerCoreDetails",
          "value": {
            "value": "@array(activity('Get Worker Core Details').output.firstRow)",
            "type": "Expression"
          }
        },
        "policy": {
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Capture Worker Core Details as an Array",
        "description": "Add all worker pipeline details to a local variable array that can be accessed by each function call requiring the values.",
        "dependsOn": [
          {
            "activity": "Get Worker Core Details",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "Lookup",
        "typeProperties": {
          "source": {
            "type": "FabricSqlDatabaseSource",
            "sqlReaderStoredProcedureName": "[control].[GetWorkerPipelineDetailsv2]",
            "storedProcedureParameters": {
              "ExecutionId": {
                "value": {
                  "value": "@pipeline().parameters.executionId",
                  "type": "Expression"
                },
                "type": "Guid"
              },
              "PipelineId": {
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                },
                "type": "Int32"
              },
              "StageId": {
                "value": {
                  "value": "@pipeline().parameters.stageId",
                  "type": "Expression"
                },
                "type": "Int32"
              }
            },
            "partitionOption": "None",
            "queryTimeout": "02:00:00"
          },
          "datasetSettings": {
            "type": "FabricSqlDatabaseTable",
            "schema": [],
            "connectionSettings": {
              "name": "Metadata Database",
              "properties": {
                "type": "FabricSqlDatabase",
                "typeProperties": {
                  "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                  "workspaceId": "00000000-0000-0000-0000-000000000000"
                },
                "externalReferences": {
                  "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                },
                "annotations": []
              }
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": true
        },
        "name": "Get Worker Core Details",
        "description": "Return worker pipeline information for metadata database. Including target data factory, pipeline name and resource group. Return the SPN ID and Secret for the worker pipeline being executed. Called at this level as each pipeline can have a different SPN.",
        "dependsOn": []
      },
      {
        "type": "Lookup",
        "typeProperties": {
          "source": {
            "type": "FabricSqlDatabaseSource",
            "sqlReaderStoredProcedureName": "[control].[GetPipelineParameters]",
            "storedProcedureParameters": {
              "PipelineId": {
                "value": {
                  "value": "@pipeline().parameters.pipelineId",
                  "type": "Expression"
                },
                "type": "Int32"
              }
            },
            "partitionOption": "None",
            "queryTimeout": "02:00:00"
          },
          "datasetSettings": {
            "type": "FabricSqlDatabaseTable",
            "schema": [],
            "connectionSettings": {
              "name": "Metadata Database",
              "properties": {
                "type": "FabricSqlDatabase",
                "typeProperties": {
                  "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                  "workspaceId": "00000000-0000-0000-0000-000000000000"
                },
                "externalReferences": {
                  "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                },
                "annotations": []
              }
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Get Pipeline Params",
        "description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
        "dependsOn": []
      },
      {
        "type": "Lookup",
        "typeProperties": {
          "source": {
            "type": "FabricSqlDatabaseSource",
            "sqlReaderStoredProcedureName": "[control].[GetPropertyValue]",
            "storedProcedureParameters": {
              "PropertyName": {
                "value": "PipelineStatusCheckDuration",
                "type": "String"
              }
            },
            "partitionOption": "None",
            "queryTimeout": "02:00:00"
          },
          "datasetSettings": {
            "type": "FabricSqlDatabaseTable",
            "schema": [],
            "connectionSettings": {
              "name": "Metadata Database",
              "properties": {
                "type": "FabricSqlDatabase",
                "typeProperties": {
                  "artifactId": "8bc74d80-e72c-847a-4f62-e5c0bdd6042c",
                  "workspaceId": "00000000-0000-0000-0000-000000000000"
                },
                "externalReferences": {
                  "connection": "12dda100-1cd7-45b2-b893-3d0a0d6300c9"
                },
                "annotations": []
              }
            },
            "annotations": []
          }
        },
        "policy": {
          "timeout": "0.00:10:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "Get Wait Duration",
        "description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
        "dependsOn": []
      }
    ],
    "parameters": {
      "executionId": {
        "type": "string"
      },
      "stageId": {
        "type": "int"
      },
      "pipelineId": {
        "type": "int"
      }
    },
    "variables": {
      "WorkerPipelineState": {
        "type": "Boolean"
      },
      "WorkerRunId": {
        "type": "String"
      },
      "WorkerCoreDetails": {
        "type": "Array"
      }
    },
    "folder": {
      "name": "Cumulus.Control"
    }
  }
}