{
	"name": "01-IngestExecutor",
	"properties": {
		"activities": [
			{
				"name": "Get Ingest Payload",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[ingest].[PayloadProcedure]",
						"storedProcedureParameters": {
							"DatasetId": {
								"type": "Int16",
								"value": "5"
							},
							"Incremental": {
								"type": "Int16",
								"value": "0"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "If FileServer",
				"description": "True if LS = FileServer",
				"type": "IfCondition",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Get Ingest Payload",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(equals(activity('Get Ingest Payload').output.firstRow.LinkedServiceName,'DataSourcesVM02'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Switch dataset types for DataSourceVM02",
				"type": "Switch",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "If FileServer",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('Get Ingest Payload').output.firstRow.ExtensionType",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "binary",
							"activities": [
								{
									"name": "Copy Binary VM02",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceDatasetGeneric",
											"type": "DatasetReference",
											"parameters": {
												"Host": {
													"value": "@activity('Get Ingest Payload').output.firstRow.CompleteSource",
													"type": "Expression"
												},
												"UserName": "azure_vm_admin",
												"Directory": {
													"value": "@activity('Get Ingest Payload').output.firstRow.CompleteSource",
													"type": "Expression"
												},
												"FileName": {
													"value": "@activity('Get Ingest Payload').output.firstRow.SourceName",
													"type": "Expression"
												},
												"Password": "vmadminpassword"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDataLakeDatasetGeneric",
											"type": "DatasetReference",
											"parameters": {
												"FileSystem": "raw",
												"Directory": {
													"value": "@concat(activity('Get Ingest Payload').output.firstRow.LinkedServiceName,'/',activity('Get Ingest Payload').output.firstRow.DatasetDisplayName,'/Version=',activity('Get Ingest Payload').output.firstRow.VersionNumber,'/',variables('DateTimeHierarchy'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@activity('Get Ingest Payload').output.firstRow.SourceName",
													"type": "Expression"
												},
												"AccountName": "cumulusframeworkdev"
											}
										}
									]
								}
							]
						},
						{
							"value": "parquet",
							"activities": [
								{
									"name": "Copy Parquet VM02",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParquetSourceDatasetGeneric",
											"type": "DatasetReference",
											"parameters": {
												"Host": {
													"value": "@activity('Get Ingest Payload').output.firstRow.CompleteSource",
													"type": "Expression"
												},
												"UserName": "azure_vm_admin",
												"Directory": {
													"value": "@activity('Get Ingest Payload').output.firstRow.CompleteSource",
													"type": "Expression"
												},
												"FileName": "vmadminpassword"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetDataLakeDatasetGeneric",
											"type": "DatasetReference",
											"parameters": {
												"FileSystem": "raw",
												"Directory": {
													"value": "@concat(activity('Get Ingest Payload').output.firstRow.LinkedServiceName,'/',activity('Get Ingest Payload').output.firstRow.DatasetDisplayName,'/Version=',activity('Get Ingest Payload').output.firstRow.VersionNumber,'/',variables('DateTimeHierarchy'))",
													"type": "Expression"
												},
												"FileName": "@activity('Get Ingest Payload').output.firstRow.SourceName",
												"AccountName": "cumulusframeworkdev"
											}
										}
									]
								}
							]
						},
						{
							"value": "json"
						}
					]
				}
			},
			{
				"name": "If runDate Specified",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(equals(pipeline().parameters.runDate,''))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Set Folder DateTime Hierarchy_copy1",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "DateTimeHierarchy",
								"value": {
									"value": "@formatDateTime(pipeline().TriggerTime, '\\ye\\ar=yyyy/\\mon\\t\\h=MM/\\d\\a\\y=dd')",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"runDate": {
				"type": "string"
			}
		},
		"variables": {
			"DateTimeHierarchy": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Cumulus.Ingest"
		},
		"annotations": []
	}
}