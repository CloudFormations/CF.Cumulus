{
	"name": "03-Child",
	"properties": {
		"description": "procfwk child pipeline used to execute Worker pipelines within a given execution stage. This pipeline will be called once for each stage, then execute all Workers in parallel.",
		"activities": [
			{
				"name": "Get Pipelines",
				"description": "Returns all pipelines from the metadata to be executed within a given processing stage.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPipelinesInStage]",
						"storedProcedureParameters": {
							"ExecutionId": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().parameters.ExecutionId",
									"type": "Expression"
								}
							},
							"StageId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.StageId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Execute Pipelines",
				"description": "Second level ForEach to run in parallel all pipelines within the stage. Items for iteration passed from the Get Pipelines lookup activity.",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Pipelines",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Pipelines').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 50,
					"activities": [
						{
							"name": "Worker Pipeline Executor",
							"description": "Run the required worker pipeline and wait for its completion. Update metadata once done.",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "04-Infant",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"executionId": {
										"value": "@pipeline().parameters.ExecutionId",
										"type": "Expression"
									},
									"stageId": {
										"value": "@pipeline().parameters.StageId",
										"type": "Expression"
									},
									"pipelineId": {
										"value": "@item().PipelineId",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"StageId": {
				"type": "int"
			},
			"ExecutionId": {
				"type": "string"
			}
		},
		"folder": {
			"name": "_ProcFwk"
		},
		"annotations": [
			"procfwk",
			"Child"
		]
	}
}