{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "factoryName": {
      "type": "string",
      "metadata": "Data Factory name",
      "defaultValue": ""
    },
    "FrameworkFunctions_properties_typeProperties_functionAppUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "Keys_properties_typeProperties_baseUrl": {
      "type": "string",
      "defaultValue": ""
    },
    "SupportDatabase_properties_typeProperties_connectionString_secretName": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('factoryName'), '/01-Grandparent')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "ADF.procfwk grandparent pipeline used optionally to bootstrap any wider processes in your Data Factory that then calls the processing framework.",
        "activities": [
          {
            "name": "procfwk",
            "description": "Call procfwk",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "02-Parent",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "BatchName": {
                  "value": "@pipeline().parameters.BatchName",
                  "type": "Expression"
                }
              }
            }
          }
        ],
        "parameters": {
          "BatchName": {
            "type": "string",
            "defaultValue": "NotUsed"
          }
        },
        "folder": {
          "name": "_ProcFwk"
        },
        "annotations": [
          "procfwk",
          "Grandparent"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/02-Parent')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/02-Parent')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "ADF.procfwk parent pipeline used to bootstrap the orchestration framework in perform the first level ForEach calls in sequence for the metadata stages.",
        "activities": [
          {
            "name": "Get Stages",
            "description": "Returns a distinct list of execution stages within the framework metadata.",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Set Execution Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetStages]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "type": "Guid",
                    "value": {
                      "value": "@variables('ExecutionId')",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "Execute Stages",
            "description": "Top level ForEach to sequentially call all processing stages within the framework metadata. Items for iteration passed from the Get Stages lookup activity.",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Get Stages",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Get Stages').output.value",
                "type": "Expression"
              },
              "isSequential": true,
              "activities": [
                {
                  "name": "Stage Executor",
                  "description": "Call to the framework generic child pipeline for a given execution stage.",
                  "type": "ExecutePipeline",
                  "dependsOn": [
                    {
                      "activity": "Log Stage Preparing",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "03-Child",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "StageId": {
                        "value": "@item().StageId",
                        "type": "Expression"
                      },
                      "ExecutionId": {
                        "value": "@variables('ExecutionId')",
                        "type": "Expression"
                      }
                    }
                  }
                },
                {
                  "name": "Log Stage Preparing",
                  "description": "Update the current execution table flagging all pipelines within the stage as preparing.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Check and Update Blockers",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogStagePreparing]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@variables('ExecutionId')",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "StageId": {
                        "value": {
                          "value": "@item().StageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Check and Update Blockers",
                  "description": "Used to double check and stop the next execution stage if failures and blockers have be incurred. This also depends on the failure handling property value which defines the stored procedure behaviour.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[CheckForBlockedPipelines]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@variables('ExecutionId')",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "StageId": {
                        "value": {
                          "value": "@item().StageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Execution Wrapper",
            "description": "Wrapper to reset and restart processing or create a completely new execution instance of the framework metadata.",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Clean Up Previous Run",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[ExecutionWrapper]",
                "storedProcedureParameters": {
                  "CallingDataFactory": {
                    "type": "String",
                    "value": {
                      "value": "@pipeline().DataFactory",
                      "type": "Expression"
                    }
                  },
                  "BatchName": {
                    "type": "String",
                    "value": {
                      "value": "@pipeline().parameters.BatchName",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Check Outcome and Update Logs",
            "description": "After a successful execution run the current execution metadata is moved to the long term logging table by this stored procedure call. Otherwise an error will be raised.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Execute Stages",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[UpdateExecutionLog]",
              "storedProcedureParameters": {
                "PerformErrorCheck": {
                  "value": {
                    "value": "@bool(1)",
                    "type": "Expression"
                  },
                  "type": "Boolean"
                },
                "ExecutionId": {
                  "value": {
                    "value": "@variables('ExecutionId')",
                    "type": "Expression"
                  },
                  "type": "Guid"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Check Previous Execution",
            "description": "Query the current execution table for worker pipelines that require a clean up from the previous execution run.",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Execute Precursor",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[CheckPreviousExeuction]",
                "storedProcedureParameters": {
                  "BatchName": {
                    "type": "String",
                    "value": {
                      "value": "@pipeline().parameters.BatchName",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "Clean Up Previous Run",
            "description": "Handle Worker pipelines that are reported as Running when the parent pipeline is called again. Get what the actual status of those pipelines is.",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Check Previous Execution",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Check Metadata Integrity",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Check Previous Execution').output.value",
                "type": "Expression"
              },
              "isSequential": false,
              "batchCount": 50,
              "activities": [
                {
                  "name": "Get SPN Details",
                  "type": "Lookup",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": true,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "AzureSqlSource",
                      "sqlReaderStoredProcedureName": "[[procfwk].[GetWorkerAuthDetails]",
                      "storedProcedureParameters": {
                        "ExecutionId": {
                          "type": "Guid",
                          "value": {
                            "value": "@item().LocalExecutionId",
                            "type": "Expression"
                          }
                        },
                        "PipelineId": {
                          "type": "Int32",
                          "value": {
                            "value": "@item().PipelineId",
                            "type": "Expression"
                          }
                        },
                        "StageId": {
                          "type": "Int32",
                          "value": {
                            "value": "@item().StageId",
                            "type": "Expression"
                          }
                        }
                      },
                      "queryTimeout": "02:00:00",
                      "partitionOption": "None"
                    },
                    "dataset": {
                      "referenceName": "GetSetMetadata",
                      "type": "DatasetReference",
                      "parameters": {}
                    }
                  }
                },
                {
                  "name": "Log Pipeline Checking",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogPipelineChecking]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@item().LocalExecutionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@item().PipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@item().StageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Get Pipeline Status",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [
                    {
                      "activity": "Get SPN Details",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "Log Pipeline Checking",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": true
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "CheckPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "value": "@concat('\n{\n    \"tenantId\": \"',activity('Get SPN Details').output.firstRow.TenantId,'\",\n    \"applicationId\": \"',activity('Get SPN Details').output.firstRow.AppId,'\",\n    \"authenticationKey\": \"',activity('Get SPN Details').output.firstRow.AppSecret,'\",\n    \"subscriptionId\": \"',activity('Get SPN Details').output.firstRow.SubscriptionId,'\",\n    \"resourceGroup\": \"',item().ResourceGroupName,'\",\n    \"factoryName\": \"',item().DataFactoryName,'\",\n    \"pipelineName\": \"',item().PipelineName,'\",\n    \"runId\": \"',item().AdfPipelineRunId,'\"\n}')",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "FrameworkFunctions",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Set Pipeline Status",
                  "description": "Update the metadata depending on the actual pipeline outcome. Using the status as the case.",
                  "type": "Switch",
                  "dependsOn": [
                    {
                      "activity": "Get Pipeline Status",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "on": {
                      "value": "@activity('Get Pipeline Status').output.Status",
                      "type": "Expression"
                    },
                    "cases": [
                      {
                        "value": "Failed",
                        "activities": [
                          {
                            "name": "Pipeline Status Failed",
                            "description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
                            "type": "SqlServerStoredProcedure",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:10:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "storedProcedureName": "[[procfwk].[SetLogPipelineFailed]",
                              "storedProcedureParameters": {
                                "ExecutionId": {
                                  "value": {
                                    "value": "@item().LocalExecutionId",
                                    "type": "Expression"
                                  },
                                  "type": "Guid"
                                },
                                "PipelineId": {
                                  "value": {
                                    "value": "@item().PipelineId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "RunId": {
                                  "value": null,
                                  "type": "Guid"
                                },
                                "StageId": {
                                  "value": {
                                    "value": "@item().StageId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                }
                              }
                            },
                            "linkedServiceName": {
                              "referenceName": "SupportDatabase",
                              "type": "LinkedServiceReference"
                            }
                          }
                        ]
                      },
                      {
                        "value": "Succeeded",
                        "activities": [
                          {
                            "name": "Pipeline Status Succeeded",
                            "description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
                            "type": "SqlServerStoredProcedure",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:10:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "storedProcedureName": "[[procfwk].[SetLogPipelineSuccess]",
                              "storedProcedureParameters": {
                                "ExecutionId": {
                                  "value": {
                                    "value": "@item().LocalExecutionId",
                                    "type": "Expression"
                                  },
                                  "type": "Guid"
                                },
                                "PipelineId": {
                                  "value": {
                                    "value": "@item().PipelineId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "StageId": {
                                  "value": {
                                    "value": "@item().StageId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                }
                              }
                            },
                            "linkedServiceName": {
                              "referenceName": "SupportDatabase",
                              "type": "LinkedServiceReference"
                            }
                          }
                        ]
                      },
                      {
                        "value": "Queued",
                        "activities": [
                          {
                            "name": "Pipeline Status Queued - Running",
                            "description": "Updates the current execution table with a pipeline status of running if the function outcome is queued.",
                            "type": "SqlServerStoredProcedure",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:10:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
                              "storedProcedureParameters": {
                                "ExecutionId": {
                                  "value": {
                                    "value": "@item().LocalExecutionId",
                                    "type": "Expression"
                                  },
                                  "type": "Guid"
                                },
                                "PipelineId": {
                                  "value": {
                                    "value": "@item().PipelineId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "StageId": {
                                  "value": {
                                    "value": "@item().StageId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                }
                              }
                            },
                            "linkedServiceName": {
                              "referenceName": "SupportDatabase",
                              "type": "LinkedServiceReference"
                            }
                          }
                        ]
                      },
                      {
                        "value": "InProgress",
                        "activities": [
                          {
                            "name": "Pipeline Status InProgress - Running",
                            "description": "Updates the current execution table with a pipeline status of running if the function outcome is in progress.",
                            "type": "SqlServerStoredProcedure",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:10:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
                              "storedProcedureParameters": {
                                "ExecutionId": {
                                  "value": {
                                    "value": "@item().LocalExecutionId",
                                    "type": "Expression"
                                  },
                                  "type": "Guid"
                                },
                                "PipelineId": {
                                  "value": {
                                    "value": "@item().PipelineId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "StageId": {
                                  "value": {
                                    "value": "@item().StageId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                }
                              }
                            },
                            "linkedServiceName": {
                              "referenceName": "SupportDatabase",
                              "type": "LinkedServiceReference"
                            }
                          }
                        ]
                      },
                      {
                        "value": "Cancelled",
                        "activities": [
                          {
                            "name": "Pipeline Status Cancelled",
                            "description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
                            "type": "SqlServerStoredProcedure",
                            "dependsOn": [],
                            "policy": {
                              "timeout": "0.00:10:00",
                              "retry": 0,
                              "retryIntervalInSeconds": 30,
                              "secureOutput": false,
                              "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                              "storedProcedureName": "[[procfwk].[SetLogPipelineCancelled]",
                              "storedProcedureParameters": {
                                "ExecutionId": {
                                  "value": {
                                    "value": "@item().LocalExecutionId",
                                    "type": "Expression"
                                  },
                                  "type": "Guid"
                                },
                                "PipelineId": {
                                  "value": {
                                    "value": "@item().PipelineId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "StageId": {
                                  "value": {
                                    "value": "@item().StageId",
                                    "type": "Expression"
                                  },
                                  "type": "Int32"
                                },
                                "CleanUpRun": {
                                  "value": {
                                    "value": "@bool(1)",
                                    "type": "Expression"
                                  },
                                  "type": "Boolean"
                                }
                              }
                            },
                            "linkedServiceName": {
                              "referenceName": "SupportDatabase",
                              "type": "LinkedServiceReference"
                            }
                          }
                        ]
                      }
                    ],
                    "defaultActivities": [
                      {
                        "name": "Pipeline Status Unknown",
                        "description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
                        "type": "SqlServerStoredProcedure",
                        "dependsOn": [],
                        "policy": {
                          "timeout": "0.00:10:00",
                          "retry": 0,
                          "retryIntervalInSeconds": 30,
                          "secureOutput": false,
                          "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                          "storedProcedureName": "[[procfwk].[SetLogPipelineUnknown]",
                          "storedProcedureParameters": {
                            "ExecutionId": {
                              "value": {
                                "value": "@item().LocalExecutionId",
                                "type": "Expression"
                              },
                              "type": "Guid"
                            },
                            "PipelineId": {
                              "value": {
                                "value": "@item().PipelineId",
                                "type": "Expression"
                              },
                              "type": "Int32"
                            },
                            "StageId": {
                              "value": {
                                "value": "@item().StageId",
                                "type": "Expression"
                              },
                              "type": "Int32"
                            },
                            "CleanUpRun": {
                              "value": {
                                "value": "@bool(1)",
                                "type": "Expression"
                              },
                              "type": "Boolean"
                            }
                          }
                        },
                        "linkedServiceName": {
                          "referenceName": "SupportDatabase",
                          "type": "LinkedServiceReference"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Set Last Check DateTime",
                  "description": "Update the current execution table with a date time from when the function last checked the pipeline status.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Get Pipeline Status",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogPipelineLastStatusCheck]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@item().LocalExecutionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@item().PipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@item().StageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Execute Precursor",
            "description": "Uses the database property value ExecutionPrecursorProc to run any custom logic against the metadata database before the execution run starts.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Is Parent Already Running",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[ExecutePrecursorProcedure]"
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Set Execution Id",
            "description": "Set the local execution Id to a pipeline variable for each in several downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Execution Wrapper",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "ExecutionId",
              "value": {
                "value": "@activity('Execution Wrapper').output.firstRow.ExecutionId",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Is Parent Already Running",
            "description": "Establish before anything else if the parent pipeline is already running. Batch execution aware.",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "Check For Running Pipeline",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "BatchName": {
                  "value": "@pipeline().parameters.BatchName",
                  "type": "Expression"
                },
                "PipelineName": {
                  "value": "@pipeline().Pipeline",
                  "type": "Expression"
                },
                "ThisRunId": {
                  "value": "@pipeline().RunId",
                  "type": "Expression"
                }
              }
            }
          },
          {
            "name": "Check Metadata Integrity",
            "description": "Performs a series of checks on all metadata held in the framework SQLDB. This is intended to raise errors before an execution run even starts.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Execute Precursor",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[CheckMetadataIntegrity]",
              "storedProcedureParameters": {
                "BatchName": {
                  "value": {
                    "value": "@pipeline().parameters.BatchName",
                    "type": "Expression"
                  },
                  "type": "String"
                },
                "DebugMode": {
                  "value": {
                    "value": "@bool(0)",
                    "type": "Expression"
                  },
                  "type": "Boolean"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "BatchName": {
            "type": "string",
            "defaultValue": "NotUsed"
          }
        },
        "variables": {
          "ExecutionId": {
            "type": "String"
          }
        },
        "folder": {
          "name": "_ProcFwk"
        },
        "annotations": [
          "procfwk",
          "Parent"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/GetSetMetadata')]",
        "[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]",
        "[concat(variables('factoryId'), '/pipelines/Check For Running Pipeline')]",
        "[concat(variables('factoryId'), '/pipelines/03-Child')]",
        "[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/03-Child')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "ADF.procfwk child pipeline used to execute Worker pipelines within a given execution stage. This pipeline will be called once for each stage, then execute all Workers in parallel.",
        "activities": [
          {
            "name": "Get Pipelines",
            "description": "Returns all pipelines from the metadata to be executed within a given processing stage.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPipelinesInStage]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "type": "Guid",
                    "value": {
                      "value": "@pipeline().parameters.ExecutionId",
                      "type": "Expression"
                    }
                  },
                  "StageId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.StageId",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              },
              "firstRowOnly": false
            }
          },
          {
            "name": "Execute Pipelines",
            "description": "Second level ForEach to run in parallel all pipelines within the stage. Items for iteration passed from the Get Pipelines lookup activity.",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "Get Pipelines",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Get Pipelines').output.value",
                "type": "Expression"
              },
              "isSequential": false,
              "batchCount": 50,
              "activities": [
                {
                  "name": "Worker Pipeline Executor",
                  "description": "Run the required worker pipeline and wait for its completion. Update metadata once done.",
                  "type": "ExecutePipeline",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "04-Infant",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "executionId": {
                        "value": "@pipeline().parameters.ExecutionId",
                        "type": "Expression"
                      },
                      "stageId": {
                        "value": "@pipeline().parameters.StageId",
                        "type": "Expression"
                      },
                      "pipelineId": {
                        "value": "@item().PipelineId",
                        "type": "Expression"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "StageId": {
            "type": "int"
          },
          "ExecutionId": {
            "type": "string"
          }
        },
        "folder": {
          "name": "_ProcFwk"
        },
        "annotations": [
          "procfwk",
          "Child"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/GetSetMetadata')]",
        "[concat(variables('factoryId'), '/pipelines/04-Infant')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/04-Infant')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "ADF.procfwk infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
        "activities": [
          {
            "name": "Execute Worker Pipeline",
            "description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Log Pipeline Running",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Get Pipeline Params",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": true
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "ExecutePipeline",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "@concat('\n{\n\t\"tenantId\": \"',variables('WorkerTenantId'),'\",\n\t\"applicationId\": \"',variables('WorkerAppId'),'\",\n\t\"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n\t\"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n\t\"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n\t\"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n\t\"pipelineName\": \"',variables('WorkerPipelineName'),'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "FrameworkFunctions",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Get Pipeline Params",
            "description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPipelineParameters]",
                "storedProcedureParameters": {
                  "PipelineId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Log Pipeline Running",
            "description": "Sets the current pipeline with a status of running within the current execution database table.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Is Target Worker Validate",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[SetLogPipelineRunning]",
              "storedProcedureParameters": {
                "ExecutionId": {
                  "value": {
                    "value": "@pipeline().parameters.ExecutionId",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "PipelineId": {
                  "value": {
                    "value": "@pipeline().parameters.pipelineId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "StageId": {
                  "value": {
                    "value": "@pipeline().parameters.StageId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Get Worker Authentication Details",
            "description": "Return the SPN ID and Secret for the worker pipeline being executed. Called at this level as each pipeline can have a different SPN.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": true,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetWorkerAuthDetails]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "type": "Guid",
                    "value": {
                      "value": "@pipeline().parameters.executionId",
                      "type": "Expression"
                    }
                  },
                  "PipelineId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    }
                  },
                  "StageId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Log Execute Function Activity Failure",
            "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Execute Worker Pipeline",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
              "storedProcedureParameters": {
                "ExecutionId": {
                  "value": {
                    "value": "@pipeline().parameters.ExecutionId",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "PipelineId": {
                  "value": {
                    "value": "@pipeline().parameters.pipelineId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "StageId": {
                  "value": {
                    "value": "@pipeline().parameters.StageId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "CallingActivity": {
                  "value": "ExecuteWorkerPipeline",
                  "type": "String"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Update Run Id",
            "description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Set Run Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[SetLogPipelineRunId]",
              "storedProcedureParameters": {
                "ExecutionId": {
                  "value": {
                    "value": "@pipeline().parameters.ExecutionId",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "PipelineId": {
                  "value": {
                    "value": "@pipeline().parameters.pipelineId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "RunId": {
                  "value": {
                    "value": "@variables('WorkerRunId')",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "StageId": {
                  "value": {
                    "value": "@pipeline().parameters.StageId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Check For Alerts",
            "description": "Checks the properties tables and if any recipients in the database require alerts sending for the current pipeline ID.",
            "type": "Lookup",
            "dependsOn": [
              {
                "activity": "Update Run Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Pipeline Result",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[CheckForEmailAlerts]",
                "storedProcedureParameters": {
                  "PipelineId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              },
              "firstRowOnly": true
            }
          },
          {
            "name": "Send Alerts",
            "description": "True = alerts need sending.\nFalse = do nothing.",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Check For Alerts",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@activity('Check For Alerts').output.firstRow.SendAlerts",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Get Email Parts",
                  "description": "Return all required content from the metadata database to send an email alerting using the procfwk. The lookup returns the exact content for the function body request.",
                  "type": "Lookup",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": true,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "AzureSqlSource",
                      "sqlReaderStoredProcedureName": "[[procfwk].[GetEmailAlertParts]",
                      "storedProcedureParameters": {
                        "PipelineId": {
                          "type": "Int32",
                          "value": {
                            "value": "@pipeline().parameters.pipelineId",
                            "type": "Expression"
                          }
                        }
                      },
                      "queryTimeout": "02:00:00",
                      "partitionOption": "None"
                    },
                    "dataset": {
                      "referenceName": "GetSetMetadata",
                      "type": "DatasetReference",
                      "parameters": {}
                    },
                    "firstRowOnly": true
                  }
                },
                {
                  "name": "Send Email",
                  "description": "Use an Azure Function to perform an SMTP client email send operation.",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [
                    {
                      "activity": "Get Email Parts",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": true
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "SendEmail",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "value": "@activity('Get Email Parts').output.firstRow",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "FrameworkFunctions",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Wait Until Pipeline Completes",
            "description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
            "type": "Until",
            "dependsOn": [
              {
                "activity": "Get Wait Duration",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Execute Worker Pipeline",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Run Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@variables('WorkerPipelineState')",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "Get Worker Pipeline Status",
                  "description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
                  "type": "AzureFunctionActivity",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": true
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "functionName": "CheckPipelineStatus",
                    "method": "POST",
                    "headers": {},
                    "body": {
                      "value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerTenantId'),'\",\n    \"applicationId\": \"',variables('WorkerAppId'),'\",\n    \"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n    \"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n    \"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n    \"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n    \"pipelineName\": \"',variables('WorkerPipelineName'),'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                      "type": "Expression"
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "FrameworkFunctions",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Wait If Running",
                  "description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
                  "type": "IfCondition",
                  "dependsOn": [
                    {
                      "activity": "Set Worker State",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "expression": {
                      "value": "@variables('WorkerPipelineState')",
                      "type": "Expression"
                    },
                    "ifFalseActivities": [
                      {
                        "name": "Wait for Pipeline",
                        "description": "The processing pipeline is still running so Wait before checking its status again.",
                        "type": "Wait",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                          "waitTimeInSeconds": {
                            "value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
                            "type": "Expression"
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "Set Last Check DateTime",
                  "description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Get Worker Pipeline Status",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogPipelineLastStatusCheck]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Log Check Function Activity Failure",
                  "description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [
                    {
                      "activity": "Get Worker Pipeline Status",
                      "dependencyConditions": [
                        "Failed"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
                    "storedProcedureParameters": {
                      "CallingActivity": {
                        "value": "GetWorkerPipelineStatus",
                        "type": "String"
                      },
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                },
                {
                  "name": "Set Worker State",
                  "description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "Get Worker Pipeline Status",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "WorkerPipelineState",
                    "value": {
                      "value": "@equals('Done',activity('Get Worker Pipeline Status').output.SimpleStatus)",
                      "type": "Expression"
                    }
                  }
                }
              ],
              "timeout": "0.00:10:00"
            }
          },
          {
            "name": "Set Pipeline Result",
            "description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
            "type": "Switch",
            "dependsOn": [
              {
                "activity": "Wait Until Pipeline Completes",
                "dependencyConditions": [
                  "Completed"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "on": {
                "value": "@activity('Get Worker Pipeline Status').output.Status",
                "type": "Expression"
              },
              "cases": [
                {
                  "value": "Succeeded",
                  "activities": [
                    {
                      "name": "Pipeline Status Succeeded",
                      "description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
                      "type": "SqlServerStoredProcedure",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "storedProcedureName": "[[procfwk].[SetLogPipelineSuccess]",
                        "storedProcedureParameters": {
                          "ExecutionId": {
                            "value": {
                              "value": "@pipeline().parameters.executionId",
                              "type": "Expression"
                            },
                            "type": "Guid"
                          },
                          "PipelineId": {
                            "value": {
                              "value": "@pipeline().parameters.pipelineId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          },
                          "StageId": {
                            "value": {
                              "value": "@pipeline().parameters.stageId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "SupportDatabase",
                        "type": "LinkedServiceReference"
                      }
                    }
                  ]
                },
                {
                  "value": "Failed",
                  "activities": [
                    {
                      "name": "Pipeline Status Failed",
                      "description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
                      "type": "SqlServerStoredProcedure",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "storedProcedureName": "[[procfwk].[SetLogPipelineFailed]",
                        "storedProcedureParameters": {
                          "ExecutionId": {
                            "value": {
                              "value": "@pipeline().parameters.executionId",
                              "type": "Expression"
                            },
                            "type": "Guid"
                          },
                          "PipelineId": {
                            "value": {
                              "value": "@pipeline().parameters.pipelineId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          },
                          "RunId": {
                            "value": {
                              "value": "@variables('WorkerRunId')",
                              "type": "Expression"
                            },
                            "type": "Guid"
                          },
                          "StageId": {
                            "value": {
                              "value": "@pipeline().parameters.stageId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "SupportDatabase",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "Get Worker Pipeline Error Details",
                      "description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
                      "type": "AzureFunctionActivity",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": true
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "functionName": "GetActivityErrors",
                        "method": "POST",
                        "headers": {},
                        "body": {
                          "value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerTenantId'),'\",\n    \"applicationId\": \"',variables('WorkerAppId'),'\",\n    \"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n    \"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n    \"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n    \"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n    \"pipelineName\": \"',variables('WorkerPipelineName'),'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
                          "type": "Expression"
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "FrameworkFunctions",
                        "type": "LinkedServiceReference"
                      }
                    },
                    {
                      "name": "Log Error Details",
                      "description": "Parses pipeline error details and persists them to the metadata database error log table.",
                      "type": "SqlServerStoredProcedure",
                      "dependsOn": [
                        {
                          "activity": "Get Worker Pipeline Error Details",
                          "dependencyConditions": [
                            "Succeeded"
                          ]
                        }
                      ],
                      "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "storedProcedureName": "[[procfwk].[SetErrorLogDetails]",
                        "storedProcedureParameters": {
                          "JsonErrorDetails": {
                            "value": {
                              "value": "@string(activity('Get Worker Pipeline Error Details').output)",
                              "type": "Expression"
                            },
                            "type": "String"
                          },
                          "LocalExecutionId": {
                            "value": {
                              "value": "@pipeline().parameters.executionId",
                              "type": "Expression"
                            },
                            "type": "Guid"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "SupportDatabase",
                        "type": "LinkedServiceReference"
                      }
                    }
                  ]
                },
                {
                  "value": "Cancelled",
                  "activities": [
                    {
                      "name": "Pipeline Status Cancelled",
                      "description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
                      "type": "SqlServerStoredProcedure",
                      "dependsOn": [],
                      "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                        "storedProcedureName": "[[procfwk].[SetLogPipelineCancelled]",
                        "storedProcedureParameters": {
                          "ExecutionId": {
                            "value": {
                              "value": "@pipeline().parameters.executionId",
                              "type": "Expression"
                            },
                            "type": "Guid"
                          },
                          "PipelineId": {
                            "value": {
                              "value": "@pipeline().parameters.pipelineId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          },
                          "StageId": {
                            "value": {
                              "value": "@pipeline().parameters.stageId",
                              "type": "Expression"
                            },
                            "type": "Int32"
                          }
                        }
                      },
                      "linkedServiceName": {
                        "referenceName": "SupportDatabase",
                        "type": "LinkedServiceReference"
                      }
                    }
                  ]
                }
              ],
              "defaultActivities": [
                {
                  "name": "Pipeline Status Unknown",
                  "description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogPipelineUnknown]",
                    "storedProcedureParameters": {
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.executionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.stageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Get Wait Duration",
            "description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
                "storedProcedureParameters": {
                  "PropertyName": {
                    "type": "String",
                    "value": "PipelineStatusCheckDuration"
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Set App Id",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Authentication Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerAppId",
              "value": {
                "value": "@activity('Get Worker Authentication Details').output.firstRow.AppId",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set App Secret",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Authentication Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerAppSecret",
              "value": {
                "value": "@activity('Get Worker Authentication Details').output.firstRow.AppSecret",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Run Id",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Execute Worker Pipeline",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerRunId",
              "value": {
                "value": "@activity('Execute Worker Pipeline').output.RunId",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Get Worker Pipeline Details",
            "description": "Return none sensitive worker pipeline information for metadata database. Including target data factory, pipeline name and resource group.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": true,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetWorkerPipelineDetails]",
                "storedProcedureParameters": {
                  "ExecutionId": {
                    "type": "Guid",
                    "value": {
                      "value": "@pipeline().parameters.ExecutionId",
                      "type": "Expression"
                    }
                  },
                  "PipelineId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.pipelineId",
                      "type": "Expression"
                    }
                  },
                  "StageId": {
                    "type": "Int32",
                    "value": {
                      "value": "@pipeline().parameters.stageId",
                      "type": "Expression"
                    }
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Set Tenant Id",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Authentication Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerTenantId",
              "value": {
                "value": "@activity('Get Worker Authentication Details').output.firstRow.TenantId",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Subscription Id",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Authentication Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerSubscriptionId",
              "value": {
                "value": "@activity('Get Worker Authentication Details').output.firstRow.SubscriptionId",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Pipeline Name",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Pipeline Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerPipelineName",
              "value": {
                "value": "@activity('Get Worker Pipeline Details').output.firstRow.PipelineName",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Data Factory Name",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Pipeline Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerDataFactoryName",
              "value": {
                "value": "@activity('Get Worker Pipeline Details').output.firstRow.DataFactoryName",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Set Resource Group",
            "description": "Set local variable from activity output once for value reuse in downstream activities.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Worker Pipeline Details",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "WorkerResourceGroup",
              "value": {
                "value": "@activity('Get Worker Pipeline Details').output.firstRow.ResourceGroupName",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Validate Pipeline",
            "description": "Query the target data factory and establish if the provided worker pipeline name is valid.",
            "type": "AzureFunctionActivity",
            "dependsOn": [
              {
                "activity": "Set Resource Group",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Data Factory Name",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Subscription Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set App Secret",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set App Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Pipeline Name",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Set Tenant Id",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Log Pipeline Validating",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": true
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "ValidatePipeline",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "@concat('\n{\n\t\"tenantId\": \"',variables('WorkerTenantId'),'\",\n\t\"applicationId\": \"',variables('WorkerAppId'),'\",\n\t\"authenticationKey\": \"',variables('WorkerAppSecret'),'\",\n\t\"subscriptionId\": \"',variables('WorkerSubscriptionId'),'\",\n\t\"resourceGroup\": \"',variables('WorkerResourceGroup'),'\",\n\t\"factoryName\": \"',variables('WorkerDataFactoryName'),'\",\n\t\"pipelineName\": \"',variables('WorkerPipelineName'),'\"\n}')",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "FrameworkFunctions",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Is Target Worker Validate",
            "description": "True = the worker pipeline name is valid.\nFalse = the worker pipeline name is invalid. Raise an exception.",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Validate Pipeline",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@bool(activity('Validate Pipeline').output.PipelineExists)",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Throw Exception - Invalid Infant",
                  "description": "Throw an exception with details about the invalid worker pipeline name.",
                  "type": "ExecutePipeline",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "Throw Exception",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "Message": {
                        "value": "@concat('Worker pipeline [',variables('WorkerPipelineName'),'] is not valid in target Data Factory [',variables('WorkerDataFactoryName'),']')",
                        "type": "Expression"
                      }
                    }
                  }
                },
                {
                  "name": "Update Execution With Invalid Worker",
                  "description": "Update the current execution table with an informed status for the worker pipeline that couldn't be executed.",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
                    "storedProcedureParameters": {
                      "CallingActivity": {
                        "value": "InvalidPipelineName",
                        "type": "String"
                      },
                      "ExecutionId": {
                        "value": {
                          "value": "@pipeline().parameters.ExecutionId",
                          "type": "Expression"
                        },
                        "type": "Guid"
                      },
                      "PipelineId": {
                        "value": {
                          "value": "@pipeline().parameters.pipelineId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      },
                      "StageId": {
                        "value": {
                          "value": "@pipeline().parameters.StageId",
                          "type": "Expression"
                        },
                        "type": "Int32"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          },
          {
            "name": "Log Validate Function Activity Failure",
            "description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "Validate Pipeline",
                "dependencyConditions": [
                  "Failed"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[SetLogActivityFailed]",
              "storedProcedureParameters": {
                "ExecutionId": {
                  "value": {
                    "value": "@pipeline().parameters.ExecutionId",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "PipelineId": {
                  "value": {
                    "value": "@pipeline().parameters.pipelineId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "StageId": {
                  "value": {
                    "value": "@pipeline().parameters.StageId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "CallingActivity": {
                  "value": "ValidatePipeline",
                  "type": "String"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "Log Pipeline Validating",
            "description": "Sets the current pipeline with a status of validating within the current execution database table.",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[procfwk].[SetLogPipelineValidating]",
              "storedProcedureParameters": {
                "ExecutionId": {
                  "value": {
                    "value": "@pipeline().parameters.ExecutionId",
                    "type": "Expression"
                  },
                  "type": "Guid"
                },
                "PipelineId": {
                  "value": {
                    "value": "@pipeline().parameters.pipelineId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                },
                "StageId": {
                  "value": {
                    "value": "@pipeline().parameters.StageId",
                    "type": "Expression"
                  },
                  "type": "Int32"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SupportDatabase",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "executionId": {
            "type": "string"
          },
          "stageId": {
            "type": "int"
          },
          "pipelineId": {
            "type": "int"
          }
        },
        "variables": {
          "WorkerPipelineState": {
            "type": "Boolean"
          },
          "WorkerAppId": {
            "type": "String"
          },
          "WorkerAppSecret": {
            "type": "String"
          },
          "WorkerRunId": {
            "type": "String"
          },
          "WorkerTenantId": {
            "type": "String"
          },
          "WorkerSubscriptionId": {
            "type": "String"
          },
          "WorkerPipelineName": {
            "type": "String"
          },
          "WorkerDataFactoryName": {
            "type": "String"
          },
          "WorkerResourceGroup": {
            "type": "String"
          }
        },
        "folder": {
          "name": "_ProcFwk"
        },
        "annotations": [
          "procfwk",
          "Infant"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]",
        "[concat(variables('factoryId'), '/datasets/GetSetMetadata')]",
        "[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]",
        "[concat(variables('factoryId'), '/pipelines/Throw Exception')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Check For Running Pipeline')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "For a given pipeline and optional batch name establish if a pipeline run is already in progress. Throw an exception if it it.",
        "activities": [
          {
            "name": "Get Subscription",
            "description": "Use the Azure Management API to return the current subscription.",
            "type": "WebActivity",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "url": "https://management.azure.com/subscriptions?api-version=2020-01-01",
              "method": "GET",
              "headers": {},
              "authentication": {
                "type": "MSI",
                "resource": "https://management.core.windows.net/"
              }
            }
          },
          {
            "name": "Get Pipeline Runs",
            "description": "Use the Azure Management API to return a list of pipeline runs within the given time window.",
            "type": "WebActivity",
            "dependsOn": [
              {
                "activity": "Get Query Run Days Value",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Check for Valid Pipeline Name",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "url": {
                "value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{activity('Get Resource Group').output.firstRow.PropertyValue}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/queryPipelineRuns?api-version=2018-06-01",
                "type": "Expression"
              },
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(activity('Get Query Run Days Value').output.firstRow.PropertyValue))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"@{pipeline().parameters.PipelineName}\"\n      ]\n    }\n  ]\n}",
                "type": "Expression"
              },
              "authentication": {
                "type": "MSI",
                "resource": "https://management.core.windows.net/"
              }
            }
          },
          {
            "name": "Set Parsed Subscription",
            "description": "Parse the subscription string value to return just the subscription ID.",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "Get Subscription",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "variableName": "SubscriptionId",
              "value": {
                "value": "@replace(activity('Get Subscription').output.value[0].id,'/subscriptions/','')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Filter Running Pipelines",
            "description": "Filter the pipeline runs results for pipelines that exclude the current triggered run and that are currently running (in progress or queued).",
            "type": "Filter",
            "dependsOn": [
              {
                "activity": "Get Pipeline Runs",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@activity('Get Pipeline Runs').output.value",
                "type": "Expression"
              },
              "condition": {
                "value": "@and(not(equals(item().runId,pipeline().parameters.ThisRunId)),or(equals(item().status,'InProgress'),equals(item().status,'Queued')))",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Get Resource Group",
            "description": "Using the metadata properties table return the framework factory resource group name.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
                "storedProcedureParameters": {
                  "PropertyName": {
                    "type": "String",
                    "value": "FrameworkFactoryResourceGroup"
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "Get Query Run Days Value",
            "description": "Using the metadata properties table return the run days value to provide the API request with a date range for pipeline executions.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
                "storedProcedureParameters": {
                  "PropertyName": {
                    "type": "String",
                    "value": "PreviousPipelineRunsQueryRange"
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "If Pipeline Is Running",
            "description": "If the running pipeline count is greater than or equal to one.\nTrue = raise an exception.",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "If Using Batch Executions",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@greaterOrEquals(int(variables('RunCount')),1)",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Throw Exceptiion - Pipeline Running",
                  "description": "Using the utils pipeline raise an exception to stop the new trigger while a run is already in progress.",
                  "type": "ExecutePipeline",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "pipeline": {
                      "referenceName": "Throw Exception",
                      "type": "PipelineReference"
                    },
                    "waitOnCompletion": true,
                    "parameters": {
                      "Message": {
                        "value": "@concat('Provided pipeline name (',pipeline().parameters.PipelineName,') still has a run in progress or queued given the query range parameters set in the properties table.')",
                        "type": "Expression"
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "Get Execution Batch Status",
            "description": "Using the metadata properties table return the flag to indicate if batch execution setting are enabled or disabled.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderStoredProcedureName": "[[procfwk].[GetPropertyValue]",
                "storedProcedureParameters": {
                  "PropertyName": {
                    "type": "String",
                    "value": "UseExecutionBatches"
                  }
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              }
            }
          },
          {
            "name": "If Using Batch Executions",
            "description": "True = batch executions are enabled.\nFalse = batch execution are disabled.",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Get Execution Batch Status",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Filter Running Pipelines",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@equals(activity('Get Execution Batch Status').output.firstRow.PropertyValue,string(1))",
                "type": "Expression"
              },
              "ifFalseActivities": [
                {
                  "name": "Set Run Count Without Batch",
                  "description": "Set the pipelines running count variable to be tested later.",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "RunCount",
                    "value": {
                      "value": "@string(activity('Filter Running Pipelines').output.FilteredItemsCount)",
                      "type": "Expression"
                    }
                  }
                }
              ],
              "ifTrueActivities": [
                {
                  "name": "Filter for Batch Name",
                  "description": "Further filter the return pipeline runs for any running pipelines with the same batch name value.",
                  "type": "Filter",
                  "dependsOn": [],
                  "userProperties": [],
                  "typeProperties": {
                    "items": {
                      "value": "@activity('Filter Running Pipelines').output.value",
                      "type": "Expression"
                    },
                    "condition": {
                      "value": "@equals(item().parameters.BatchName,pipeline().parameters.BatchName)",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "Set Run Count for Batch",
                  "description": "Set the resulting pipeline running count variable to be tested later.",
                  "type": "SetVariable",
                  "dependsOn": [
                    {
                      "activity": "Filter for Batch Name",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "RunCount",
                    "value": {
                      "value": "@string(activity('Filter for Batch Name').output.FilteredItemsCount)",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "Check for Valid Pipeline Name",
            "description": "Use the Azure Management API to return and establish if the framework pipeline exists in the target Data Factory, including being deployed.",
            "type": "WebActivity",
            "dependsOn": [
              {
                "activity": "Set Parsed Subscription",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "Get Resource Group",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "url": {
                "value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{activity('Get Resource Group').output.firstRow.PropertyValue}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelines/@{pipeline().parameters.PipelineName}?api-version=2018-06-01",
                "type": "Expression"
              },
              "method": "GET",
              "headers": {},
              "authentication": {
                "type": "MSI",
                "resource": "https://management.core.windows.net/"
              }
            }
          }
        ],
        "parameters": {
          "BatchName": {
            "type": "string",
            "defaultValue": "NotUsed"
          },
          "PipelineName": {
            "type": "string"
          },
          "ThisRunId": {
            "type": "string"
          }
        },
        "variables": {
          "SubscriptionId": {
            "type": "String"
          },
          "RunCount": {
            "type": "String"
          }
        },
        "folder": {
          "name": "_ProcFwk/_ProcFwkUtils"
        },
        "annotations": [
          "procfwk",
          "Utils"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/GetSetMetadata')]",
        "[concat(variables('factoryId'), '/pipelines/Throw Exception')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Email Sender')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Provide a simple abstract over the send email function with request body item exposed as pipeline parameters.",
        "activities": [
          {
            "name": "Send Email",
            "description": "Use an Azure Function to perform an SMTP client email send operation.",
            "type": "AzureFunctionActivity",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "functionName": "SendEmail",
              "method": "POST",
              "headers": {},
              "body": {
                "value": "{\n\"emailRecipients\": \"@{pipeline().parameters.Recipients}\",\n\"emailCcRecipients\": \"@{pipeline().parameters.CcRecipients}\",\n\"emailBccRecipients\": \"@{pipeline().parameters.BccRecipients}\",\n\"emailSubject\": \"@{pipeline().parameters.Subject}\",\n\"emailBody\": \"@{pipeline().parameters.Body}\",\n\"emailImportance\": \"@{pipeline().parameters.Importance}\"\n}",
                "type": "Expression"
              }
            },
            "linkedServiceName": {
              "referenceName": "FrameworkFunctions",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "parameters": {
          "Recipients": {
            "type": "string"
          },
          "CcRecipients": {
            "type": "string"
          },
          "BccRecipients": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "Importance": {
            "type": "string"
          }
        },
        "folder": {
          "name": "_ProcFwk/_ProcFwkUtils"
        },
        "annotations": [
          "procfwk",
          "Utils"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Intentional Error')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait1",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          },
          {
            "name": "Raise Errors or Not",
            "description": "Framework development worker simulator.",
            "type": "IfCondition",
            "dependsOn": [
              {
                "activity": "Wait1",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "expression": {
                "value": "@equals(pipeline().parameters.RaiseErrors,'true')",
                "type": "Expression"
              },
              "ifTrueActivities": [
                {
                  "name": "Call Fail Procedure",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.00:10:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[dbo].[FailProcedure]",
                    "storedProcedureParameters": {
                      "RaiseError": {
                        "value": {
                          "value": "@pipeline().parameters.RaiseErrors",
                          "type": "Expression"
                        },
                        "type": "String"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SupportDatabase",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "parameters": {
          "RaiseErrors": {
            "type": "string",
            "defaultValue": "false"
          },
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Throw Exception')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Provide a simple way of throwing an exception within Data Factory using TSQL error handling.",
        "activities": [
          {
            "name": "Raise Error",
            "description": "Using a SQL database to raise an error/exception but wrapped up as a data factory pipeline. Error message information exposed as a pipeline parameter.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.00:10:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "AzureSqlSource",
                "sqlReaderQuery": {
                  "value": "RAISERROR('@{pipeline().parameters.Message}',16,1);",
                  "type": "Expression"
                },
                "queryTimeout": "02:00:00",
                "partitionOption": "None"
              },
              "dataset": {
                "referenceName": "GetSetMetadata",
                "type": "DatasetReference",
                "parameters": {}
              },
              "firstRowOnly": false
            }
          }
        ],
        "parameters": {
          "Message": {
            "type": "string"
          }
        },
        "folder": {
          "name": "_ProcFwk/_ProcFwkUtils"
        },
        "annotations": [
          "procfwk",
          "Utils"
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/GetSetMetadata')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 1')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait1",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 10')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait10",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 2')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait2",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 3')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait3",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 4')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait4",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 5')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait5",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 6')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait6",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 7')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait7",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 8')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait8",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 5
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/Wait 9')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used just so the ADF.procfwk has something to call during development.",
        "activities": [
          {
            "name": "Wait9",
            "description": "Framework development worker simulator.",
            "type": "Wait",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "waitTimeInSeconds": {
                "value": "@pipeline().parameters.WaitTime",
                "type": "Expression"
              }
            }
          }
        ],
        "parameters": {
          "WaitTime": {
            "type": "int",
            "defaultValue": 15
          }
        },
        "folder": {
          "name": "_Workers"
        },
        "annotations": [
          "Worker"
        ]
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/GetSetMetadata')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Single generic dataset used to get and set all database metadata.",
        "linkedServiceName": {
          "referenceName": "SupportDatabase",
          "type": "LinkedServiceReference"
        },
        "folder": {
          "name": "_ProcFwk"
        },
        "annotations": [
          "ADF.procfwk"
        ],
        "type": "AzureSqlTable",
        "schema": [],
        "typeProperties": {}
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/FrameworkFunctions')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Interact with the Azure Functions App used as middle ware when making requests to Worker pipelines. Authentication done at the Function App level.",
        "annotations": [
          "ADF.procfwk"
        ],
        "type": "AzureFunction",
        "typeProperties": {
          "functionAppUrl": "[parameters('FrameworkFunctions_properties_typeProperties_functionAppUrl')]",
          "functionKey": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Keys",
              "type": "LinkedServiceReference"
            },
            "secretName": "FrameworkFunctionsKey"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Keys')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/Keys')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Connection to Key Vault for all other ADF linked service credentials required to run the processing framework.",
        "annotations": [
          "ADF.procfwk"
        ],
        "type": "AzureKeyVault",
        "typeProperties": {
          "baseUrl": "[parameters('Keys_properties_typeProperties_baseUrl')]"
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/SupportDatabase')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Connection between ADF and processing framework metadata SQLDB.",
        "annotations": [
          "ADF.procfwk"
        ],
        "type": "AzureSqlDatabase",
        "typeProperties": {
          "connectionString": {
            "type": "AzureKeyVaultSecret",
            "store": {
              "referenceName": "Keys",
              "type": "LinkedServiceReference"
            },
            "secretName": "[parameters('SupportDatabase_properties_typeProperties_connectionString_secretName')]"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/Keys')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/FunctionalTestingTrigger')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Used for functional testing of the framework in a dedicated environment.",
        "annotations": [
          "ADF.procfwk"
        ],
        "runtimeState": "Stopped",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "01-Grandparent",
              "type": "PipelineReference"
            },
            "parameters": {}
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Hour",
            "interval": 2,
            "startTime": "2020-04-06T15:00:00Z",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/01-Grandparent')]"
      ]
    }
  ]
}